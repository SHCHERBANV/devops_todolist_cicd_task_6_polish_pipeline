name: python-deployment

run-name: ${{ github.actor }} - ${{ github.ref_name }} - ${{ github.sha }}

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      os-type:
        description: 'Operating System to use'
        required: true
        default: 'ubuntu-latest'
      python-version:
        description: 'Python version to use'
        required: true
        default: '3.8'

env:
  PythonVersion: 3.8
  DockerImageName: todoapp

jobs:
  python-ci:
    runs-on: ${{ matrix.os-type }}
    strategy:
      matrix:
        os-type: [ubuntu-latest, windows-latest]
        python-version: [3.8, 3.9]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          environment: ${{ matrix.environment }}
          version: ${{ github.sha }}
          helm-values-path: ${{ matrix.helm-values-path }}
          helm-release-name: ${{ matrix.helm-release-name }}
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage flake8
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python manage.py test

      - name: Generate Report
        run: |
          coverage run --source='.' manage.py test
          coverage report

      - name: Linting
        run: |
          flake8 . --show-source --statistics --exit-zero

      - name: Check Complexity
        run: |
          flake8 . --exit-zero --max-complexity=6

      - name: Upload python artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-artifacts
          path: .

  docker-ci:
    name: Build and Push Image
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' }}
    needs: python-ci
    steps:
      - uses: actions/download-artifact@v4
        name: Download python artifacts
        with:
          name: python-artifacts
          path: .
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          context: ./src
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DockerImageName }}:${{ github.sha }}

  helm-ci:
    runs-on: ubuntu-latest
    needs: python-ci
    if: github.ref_name == 'main'
    name: Helm CI
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: helm-artifacts
          path: .

      - name: Set Up Helm
        uses: azure/setup-helm@v4.2.0

      - name: Lint helm
        run: helm lint ./todoapp/

      - name: Template Helm
        run: helm template todoapp ./todoapp/ -f ./todoapp/values.yaml

      - name: Package Helm
        run: helm package ./todoapp

      - name: Upload Helm Artifact
        uses: actions/upload-artifact@v4
        with:
          name: helm-package
          path: ./*.tgz
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  deploy-helm:
    name: Deploy Helm
    runs-on: ubuntu-latest
    needs: [helm-ci, docker-ci]
    secrets: inherit
    strategy:
      matrix:
        environment: 
          - development
          - staging
        helm-values-path: 
          - ${{ github.event.inputs.helm-values-path }}
          - ./todoapp/values/stg.yaml
        helm-release-name: 
          - todoapp-development
          - todoapp-staging
    with:
      environment: ${{ matrix.environment }}
      version: ${{ github.sha }}
      helm-values-path: ${{ matrix.helm-values-path }}
      helm-release-name: ${{ matrix.helm-release-name }}
